name: Docker compose CI for example

on:
  schedule:
    - cron: "0 1 * * *"
  push:
    branches: [master]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches:
      - master
env:
  APISIX_VERSION: "3.1.0"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          - centos
          - debian

    steps:
      - uses: actions/checkout@v2
      
      - name: Verify exmaple image tag
        run: |
          apisix_image_centos=apisix:${APISIX_VERSION}-centos
          apisix_image_debian=apisix:${APISIX_VERSION}-debian

          image=$(cat example/docker-compose.yml | grep -Po apisix:\\d.\\d.\\d-\\w*)
          (echo ${image} | grep $apisix_image_centos || echo ${image} | grep ${apisix_image_debian} ) && exit 0

          echo "Example image does not match the current image."
          echo "Expect: apache/${apisix_image_centos} or apache/${apisix_image_debian}"
          echo "Actual: apache/${image}"

          exit 1

      - name: Build image
        run: |
          make build-on-${{ matrix.platform }}
          
      - name: use docker-compose
        run: |
          image=$(cat example/docker-compose.yml | grep -Po apisix:\\d.\\d.\\d-\\w*)
          build_image=apisix:${APISIX_VERSION}-${{ matrix.platform }}

          sed "s/${image}/${build_image}/g" example/docker-compose.yml > example/docker-compose-cache.yml
          cat example/docker-compose-cache.yml

          docker-compose -p docker-apisix -f example/docker-compose-cache.yml up -d

      - name: Test APISIX
        run: |
          sleep 30
          grep -C 3 '\[error\]' example/apisix_log/error.log && exit 1

          curl http://127.0.0.1:9180/apisix/admin/routes/1 \
          -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
            {
            "uri": "/get",
            "upstream": {
                "type": "roundrobin",
                "nodes": {
                    "web1:80": 1
                }
            }
          }'

          result_code=`curl -I -m 10 -o /dev/null -s -w %{http_code} http://127.0.0.1:9080/get`
          if [[ $result_code -ne 200 ]];then
                  printf "result_code: %s\n" "$result_code"
                  exit 125
          fi